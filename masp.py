#!/usr/bin/env python3
import sys; assert sys.version_info[0] >= 3, "Python 3 required."

from sapling_generators import VALUE_COMMITMENT_RANDOMNESS_BASE, group_hash, VALUE_COMMITMENT_VALUE_BASE
from sapling_jubjub import Fr
from sapling_pedersen import pedersen_hash_to_point

x = "let expected_cm_xs = vec![\n"
y = "let expected_cm_ys = vec![\n"
for i in range(0,10):
    vc = VALUE_COMMITMENT_VALUE_BASE*Fr(8*i, strict=True)
    rcv = Fr(1000*(i+1), strict=True)
    vc += VALUE_COMMITMENT_RANDOMNESS_BASE*rcv
    x += "\"" + str(vc.u.s) + "\",\n"
    y += "\"" + str(vc.v.s) + "\",\n"

x += "];"
y += "];"

print(x)
print(y)

pedersen_input1 = [
    False,
    False,
    False,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    True,
    False,
    True,
    False,
    False,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    False,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    True,
    False,
    False,
    False,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    False,
    False,
    False,
    True,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    False,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
]

ph1 = pedersen_hash_to_point(b"MASP__PH", 
    [True, False, False, False, False, False] + pedersen_input1)

print("\"" + str(ph1.u.s) + "\",\n")
print("\"" + str(ph1.v.s) + "\",\n")

pedersen_input2 = [
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    False,
    False,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    False,
    False,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    False,
    True,
    False,
    True,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    False,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    False,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
]

ph2 = pedersen_hash_to_point(b"MASP__PH", 
    [True, False, False, False, False, False] + pedersen_input2)

print("\"" + str(ph2.u.s) + "\",\n")
print("\"" + str(ph2.v.s) + "\",\n")